<?php

namespace AppBundle\Repository;

/**
 * ProgrammeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProgrammeRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Liste des programmes
     * dont la date est superieures a celle de la date encours
     *
     * @author: Delrodie AMOIKON
     * @version: v1.0
     * @date: 11/11/2017 20:35
     */
    public function findProgrammeAdmin()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQuery('
                      SELECT p, d
                      FROM AppBundle:Programme p
                      LEFT JOIN p.departement d
                      WHERE p.datedeb >= :date
                      ORDER BY p.datedeb ASC
                '  )
                ->setParameter('date', date('Y-m-d', time()));
        ;
        return $qb->getResult();
    }

    /**
     * Liste des programmes non traiter
     *
     * @author: Delrodie AMOIKON
     * @version: v1.0
     * @date: 11/11/2017 21:35
     */
    public function findProgrammeNonTraiter()
    {
        $em = $this->getEntityManager();
        $qb = $em->createQuery('
                      SELECT p, d
                      FROM AppBundle:Programme p
                      LEFT JOIN p.departement d
                      WHERE p.flag LIKE :flag
                      ORDER BY p.datedeb ASC
                '  )
                ->setParameter('flag', 'A traiter');
        ;
        return $qb->getResult();
    }

    /**
     * Liste des programmes non traiter lot de 10
     *
     * @author: Delrodie AMOIKON
     * @version: v1.0
     * @date: 11/11/2017 22:02
     */
    public function findProgrammeNonTraiterFiltre($offset, $limit)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQuery('
                      SELECT p, d
                      FROM AppBundle:Programme p
                      LEFT JOIN p.departement d
                      WHERE p.flag LIKE :flag
                      ORDER BY p.datedeb ASC
                '  )
                ->setFirstResult($offset)
                ->setMaxResults($limit)
                ->setParameter('flag', 'A traiter');
        ;
        return $qb->getResult();
    }

    /**
     * Liste des $limit activités
     * dont la date est superieures a celle de la date encours
     *
     * @author: Delrodie AMOIKON
     * @version: v1.0
     * @date: 12/11/2017 10:54
     */
    public function findActiviteLatest($offset, $limit)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQuery('
                      SELECT p, d
                      FROM AppBundle:Programme p
                      LEFT JOIN p.departement d
                      WHERE p.datedeb >= :date
                      ORDER BY p.datedeb ASC
                '  )
                ->setFirstResult($offset)
                ->setMaxResults($limit)
                ->setParameter('date', date('Y-m-d', time()));
        ;
        return $qb->getResult();
    }

    /**
     * Calcul du nombre total d'activités enregistrées
     *
     * @author: Delrodie AMOIKON
     * @version: v1.0
     * @since: 12/11/2017 11:23
     */
    public function countActiviteTotal()
    {
        $qb = $this->createQueryBuilder('p')
                   ->select('count(p.id)')
                   ->where('p.statut = 1')
                   ->getQuery()->getSingleScalarResult();
        ;

        return $qb;
    }

    /**
     * Calcul du nombre total d'activités dediées au jeunes
     *
     * @author: Delrodie AMOIKON
     * @version: v1.0
     * @since: 12/11/2017 11:40
     */
    public function countActiviteJeune()
    {
        $qb = $this->createQueryBuilder('p')
                   ->select('count(p.id)')
                   ->where('p.statut = 1')
                   ->andWhere("p.cible LIKE :scout")
                   ->orWhere("p.cible LIKE :jeune")
                   ->orWhere("p.cible LIKE :lou")
                   ->orWhere("p.cible LIKE :eclair")
                   ->orWhere("p.cible LIKE :chemin")
                   ->orWhere("p.cible LIKE :rout")
                   ->setParameters(array(
                       'scout' => '%scout%',
                       'jeune'  => '%jeune%',
                       'lou'  => '%lou%',
                       'eclair'  => '%eclair%',
                       'chemin'  => '%chemin%',
                       'rout'  => '%rout%',
                   ))
                   ->getQuery()->getSingleScalarResult();
        ;

        return $qb;
    }
}
